name: Application tests

on: 
  push:
  pull_request:
  workflow_call:
    inputs:
      external-tools-version:
        description: 'Version of external tools'
        default: latest
        required: false
        type: string
      
jobs:
  application-test:
    strategy:
      fail-fast: false
      matrix:
        APPROACH: [ angular, vue-v3, vue-v2, react, react-ts ]
        NODE: [ 16, 18 ]
        OS: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.OS }}
    env:
      VUE_CLI_CONFIG_PATH: /home/runner/work/devextreme-cli/devextreme-cli/.vuerc
      TOOLING_VERSION_PARAM: ${{ inputs.external-tools-version != '' && format('--tooling-version {0}', inputs.external-tools-version) || '' }}
      IS_WINDOWS:  ${{ runner.os == 'Windows' }}
    name: ${{ matrix.APPROACH }}, node ${{ matrix.NODE }}, ${{ matrix.OS }}

    steps:

    - name: Get sources
      uses: actions/checkout@v2

    # - name: Install Headless Chrome dependencies
    #   run: |
    #     sudo apt-get install -yq \
    #     gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
    #     libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
    #     libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
    #     libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
    #     fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget

    # - name: Prepare Headless Chrome
    #   uses: browser-actions/setup-chrome@latest

    # - name: Check Chrome availability
    #   run: chrome --version

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.NODE }}

    - name: Disable taobao registry
      if: ${{ !IS_WINDOWS }}
      run: |
        echo {\"useTaobaoRegistry\": false} > ${{ env.VUE_CLI_CONFIG_PATH }}

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.NODE }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.NODE }}
          ${{ runner.os }}-node-

    - uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ matrix.NODE }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ matrix.NODE }}
          ${{ runner.os }}-yarn-

    - name: Run npm install
      run: npm install --no-package-lock --no-audit --no-fund

    - name: Run docker image
      if: ${{ !IS_WINDOWS }}
      run: npm run docker:build && npm run docker:run
      working-directory: ./packages/devextreme-cli

    - name: Create applications
      run: npm run create-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
      timeout-minutes: 20

    - name: Lint applications
      if: ${{ !IS_WINDOWS }}
      run: npm run lint-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
    
    - name: Run test
      if: ${{ !IS_WINDOWS }}
      run: npm run test-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
      timeout-minutes: 20

    - name: Archive artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: |
          test-results.xml
          packages/devextreme-cli/testing/__tests__/__diff_snapshots__
          packages/devextreme-cli/testing/sandbox/logs
          home/circleci/.npm/_logs

  schematics-test:
    runs-on: ubuntu-latest
    steps:

      - name: Get sources
        uses: actions/checkout@v2
      
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-16-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-16
            ${{ runner.os }}-node-

      - name: Run npm install
        run: npm install --no-package-lock --no-audit --no-fund

      - name: Schematic tests
        run: cd packages/devextreme-schematics && npm run test
