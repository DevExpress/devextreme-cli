name: Application tests

on: 
  push:
  pull_request:
  workflow_call:
    inputs:
      external-tools-version:
        description: 'Version of external tools'
        default: latest
        required: false
        type: string
      
jobs:
  application-test:
    strategy:
      fail-fast: false
      matrix:
        APPROACH: [ angular, vue-v3, vue-v2, react, react-ts ]
        NODE: [ 16, 18 ]
        OS: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.OS }}
    env:
      VUE_CLI_CONFIG_PATH: $GITHUB_WORKSPACE/.vuerc
      TOOLING_VERSION_PARAM: ${{ inputs.external-tools-version != '' && format('--tooling-version {0}', inputs.external-tools-version) || '' }}

    name: ${{ matrix.APPROACH }}, node ${{ matrix.NODE }}, ${{ matrix.OS }}

    steps:

    - name: Get sources
      uses: actions/checkout@v3

    - name: Set up and cache Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.NODE }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> ${{ matrix.OS != 'windows-latest' && '$GITHUB_OUTPUT ' || '$env:GITHUB_OUTPUT' }}

    - name: Cache yarn
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ matrix.NODE }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ matrix.NODE }}
          ${{ runner.os }}-yarn-

    - name: Disable taobao registry
      if: ${{ startsWith( matrix.APPROACH, 'vue') }}
      run: |
        echo {\"useTaobaoRegistry\": false} > ${{ env.VUE_CLI_CONFIG_PATH }}

    - name: Run npm install
      run: npm install --no-package-lock --no-audit --no-fund

    - name: Run docker image
      if: ${{ matrix.OS != 'windows-latest' }}
      run: npm run docker:build && npm run docker:run
      working-directory: ./packages/devextreme-cli

    - name: Create applications
      run: npm run create-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
      timeout-minutes: 20

    - name: Lint applications
      if: ${{ matrix.OS != 'windows-latest' }}
      run: npm run lint-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
    
    - name: Run test
      if: ${{ matrix.OS != 'windows-latest' }}
      run: npm run test-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
      timeout-minutes: 20

    - name: Archive artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: |
          test-results.xml
          packages/devextreme-cli/testing/__tests__/__diff_snapshots__
          packages/devextreme-cli/testing/sandbox/logs

  schematics-test:
    runs-on: ubuntu-latest
    steps:

      - name: Get sources
        uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Run npm install
        run: npm install --no-package-lock --no-audit --no-fund

      - name: Schematic tests
        run: cd packages/devextreme-schematics && npm run test
