name: Application tests

on:
  push:
  pull_request:
  workflow_call:
    inputs:
      external-tools-version:
        description: 'Version of external tools'
        default: latest
        required: false
        type: string

jobs:
  application-test:
    strategy:
      fail-fast: false
      matrix:
        APPROACH:
          - angular
          - vue-v3
          - react
          - react-ts
        NODE:
          - 18
        OS:
          - ubuntu-latest
          - windows-latest

    runs-on: ${{ matrix.OS }}
    env:
      VUE_CLI_CONFIG_PATH: $GITHUB_WORKSPACE/.vuerc
      TOOLING_VERSION_PARAM: ${{ inputs.external-tools-version != '' && format('--tooling-version {0}', inputs.external-tools-version) || '' }}

    name: ${{ matrix.APPROACH }}, node ${{ matrix.NODE }}, ${{ matrix.OS }}

    steps:

    - name: Get sources
      uses: actions/checkout@v4

    - name: Run npm install
      env:
        PUPPETEER_SKIP_DOWNLOAD: true
      run: npm install --no-audit --no-fund

    - uses: browser-actions/setup-chrome@v1
      id: setup-chrome
    - run: ${{ steps.setup-chrome.outputs.chrome-path }} --version

    - name: Set Legacy-peer-deps=true
      run: npm config set legacy-peer-deps true

    - name: Create ${{ matrix.APPROACH }} application
      run: npm run create-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
      timeout-minutes: 30

    - name: Install Internal Packages
      uses: DevExpress/github-actions/install-internal-package@main
      with:
        working-directory: packages/devextreme-cli/testing/sandbox/${{ matrix.APPROACH }}/my-app

    - name: Lint created no react application
      if: ${{ matrix.OS != 'windows-latest' }}
      run: npm run lint-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}

    - name: Lint created react-ts application
      if: ${{ matrix.OS != 'windows-latest' && matrix.APPROACH == 'react-ts'}}
      run: npm run lint
      working-directory: packages/devextreme-cli/testing/sandbox/react-ts/my-app

    - name: Run template tests
      if: ${{ matrix.OS != 'windows-latest' }}
      env:
        LAUNCH_BROWSER: true
        CHROME_PATH: ${{ steps.setup-chrome.outputs.chrome-path }}
      run: npm run test-template -- -- -e ${{ matrix.APPROACH }} ${{ env.TOOLING_VERSION_PARAM }}
      timeout-minutes: 40

    - name: Archive artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: app-tests-artifacts-${{ matrix.APPROACH }}-${{ matrix.NODE }}-${{ matrix.OS }}
        path: |
          test-results.xml
          packages/devextreme-cli/testing/__tests__/__diff_snapshots__
          packages/devextreme-cli/testing/sandbox/logs

  merge-artifacts:
    runs-on: ubuntu-latest
    needs: application-test
    if: ${{ failure() && !cancelled() }}
    steps:
    - name: Merge Artifacts
      uses: actions/upload-artifact/merge@v4
      continue-on-error: true
      with:
        name: artifacts
        pattern: app-tests-artifacts-*
        delete-merged: true

  schematics-test:
    runs-on: ubuntu-latest
    steps:

      - name: Get sources
        uses: actions/checkout@v4

      - name: Set up Node.js and restore cache
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Run npm install
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
        run: npm install --no-package-lock --no-audit --no-fund

      - name: Run schematics tests
        run: cd packages/devextreme-schematics && npm run test
